---
description: 
globs: 
alwaysApply: true
---
# 智能餐厅系统 - 项目开发规则

## 📋 项目概况
- **项目类型**: 智能餐厅系统（Django 5.2 + 微信小程序）
- **开发模式**: 个人开发，单人维护
- **数据库**: MySQL (smart_restaurant)
- **开发环境**: Windows + Cursor IDE

## 🛠 技术栈规范

### 后端技术栈
- **框架**: Django 5.2
- **数据库**: MySQL 8.0+
- **API**: Django REST Framework
- **认证**: 微信小程序登录

### 前端技术栈
- **平台**: 微信小程序
- **开发工具**: 微信开发者工具
- **UI设计**: 已完成

## 📚 参考文档
- Django 5.2 官方文档：用于后端开发参考
- 微信小程序开发文档：用于前端开发参考
- 数据库操作：直接使用 mcp-mysql-server 查询和修改 smart_restaurant 数据库

## 🔹 交互与需求理解规范

### 需求确认流程
1. **复述需求**: 每次交互开始时，简明复述用户需求
2. **信息完整性检查**: 若信息不完整或存在多种实现方式，优先提问澄清
3. **避免误判**: 在不确定的情况下，不要假设用户意图，主动询问

### 问题处理优先级
1. 理解用户真实需求
2. 确认技术实现方案
3. 提供代码或解决方案

注：当你发现代码逻辑等错误时，一定要提出问题，然后修改

## 🔹 代码与输出规范

### ✅ 编码要求
- **代码风格**: 简洁、完整，去除冗余结构
- **注释语言**: 所有注释一律使用中文
- **变量命名**: 使用英文，遵循相应语言规范（Python: snake_case, JavaScript: camelCase）
- **测试用例**: 必要时提供正常与异常情况的简单测试用例

### 代码结构要求
- Django项目结构遵循官方最佳实践
- 微信小程序遵循官方目录结构
- API接口使用RESTful设计规范
- 数据库操作使用Django ORM

## 📁 文件命名与组织规范

### 目录结构维护
- **查看优先**: 修改或创建文件前，先查看现有目录结构
- **保持一致性**: 新文件放置位置应与现有结构保持一致
- **命名规范**: 文件和目录使用清晰、规范的命名

### 开发文档说明

开发文档仅作参考基准，鼓励提出更优技术方案。当发现更合适的实现方式时，请先说明问题、对比方案优劣、阐述预期收益和潜在风险，待我确认同意后，先更新开发文档再实施代码修改。始终以最佳技术实践为导向，保持透明沟通和文档代码同步。


## 🔹 自动化管理规范

### 批量操作处理
- **文件批量创建**: 需要批量创建文件/目录时，自动生成或修改 `process_project_structure.py` 脚本
- **结构化管理**: 保持项目结构的整洁和可维护性

## 📝 进度记录规范

### 已完成内容记录
- **触发条件**: 仅当用户明确表示"简要记录已完成内容"时才记录
- **更新文件**: `已完成内容.md`
- **记录格式**:
  ## 新增内容
  - 一小段话简要记录已完成的内容
  
  ## 涉及文件
  - 列出涉及修改的所有文件（包括包括新建的文件和文件夹和完整路径）
  ```

## 🚀 开发流程规范

### 阶段性开发
1. **API优先**: 先开发后端API接口
2. **逐步集成**: 完成API后立即对接前端
3. **快速验证**: 每个功能模块完成后立即测试

### 代码提交规范
- 每完成一个功能模块就整理代码
- 保持代码的可读性和可维护性
- 及时更新相关文档

## 🔍 质量保证

### 测试要求
- 每个API接口需要基本的功能测试
- 前后端集成后需要端到端测试
- 异常情况处理验证

### 性能考虑
- 数据库查询优化
- API响应时间控制
- 前端页面加载性能

---

*此规则文件将随项目发展动态调整*