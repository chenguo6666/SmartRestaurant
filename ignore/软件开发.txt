引言
1.1 目的
本文档旨在详细描述智慧餐厅点餐系统的各项功能模块、技术实现以及用戶界面
设计。本文档将作为后续开发、测试和维护工作的核心依据,确保开发团队对系
统有统一和具体的理解。

1.2 范围
本详细设计覆盖以下核心功能模块:用戶管理模块、菜品管理模块、用户点餐模
块(含购物车)、订单管理模块、管理员功能模块、移动支付模块、营销促销模
块
未来可能扩展的模块包括:系统安全模块和智能客服模块。

1.3 定义、简写和缩略语

术语/缩略语	全称	解释
API	Application Programming Interface	应用程序编程接口
CRUD	Create, Read, Update, Delete	创建、读取、更新、删除
MP1	Mini Program 1	用户端小程序
MP2	Mini Program 2	管理端小程序
Django	–	Python Web 框架
MySQL	–	关系型数据库管理系统
Redis	Remote Dictionary Server	内存数据结构存储,用作缓存
JWT	JSON Web Token	用于身份验证的开放标准

系统架构
2.1 总体架构
系统采用前后端分离的 B/S 架构。前端包括两个微信小程序:用戶端小程序(MP1)
和管理端小程序(MP2)。后端采用 Django 框架开发,提供 RESTful API 接口。
数据库使用 MySQL 进行持久化存储,Redis 作为缓存以提高系统性能。
系统架构图如下:

系统架构图内容：
该流程图展示了系统的整体架构。顶层是两个前端应用：MP1（用户端）和MP2（管理端）。这两个前端应用都与中间的“Django后端API服务（HTTPS）”进行交互。
Django后端服务负责处理核心逻辑，包括：

与“MySQL数据库”进行“读写”操作。

与“微信支付服务”处理“支付逻辑”。

与“Redis缓存”进行“缓存”操作以提升性能。

具体组件描述:
用户端小程序(MP1): 顾客使用,实现浏览菜品、点餐、加入购物车、下单、支
付、查看订单等功能。
管理端小程序(MP2): 餐厅管理员使用,实现菜品管理、分类管理、订单处理、
餐厅信息设置等功能。
后端 API 服务 (Django): 处理所有业务逻辑,数据校验,与数据库和缓存交互,
提供 API 给小程序调用。
数据库 (MySQL): 存储用户数据、菜品数据、订单数据、餐厅配置等持久化信息。
缓存 (Redis): 缓存常用数据如菜品列表、热门菜品、购物车存储等,减轻数据库
压力,提升响应速度。

2.2 技术选型

层面	技术	说明
用户端前端	微信小程序框架	提供便捷的用户体验,易于推广
管理端前端	微信小程序框架	方便管理员移动办公,与用户端技术栈统一
后端框架	Django	开发效率高,生态成熟,安全性好,自带 Admin 后台便于初期数据管理
数据库	MySQL	成熟稳定,应用广泛的关系型数据库
缓存	Redis	高性能键值存储,适用于缓存和会话管理
API 通信	RESTful API (JSON)	标准化的接口设计,前后端解耦
身份认证	JWT (JSON Web Tokens)	无状态认证,适用于分布式系统

模块详细设计
本章节将详细描述各个核心模块的功能、主要业务流程和 API 接口设计。

3.1 用戶管理模块
3.1.1 基本功能
用户注册/登录:
通过微信授权一键登录,后端获取 openid 作为用户唯一标识。
用户首次登录自动注册账户,存储微信昵称和头像。
个人信息查看:用户可在“我的”页面查看自己的基本信息。
退出登录:用户可以清除本地登录凭证。

3.1.2 主要业务流程
用户登录流程：

用户在小程序中点击“登录”。

小程序调用微信的 wx.login() 接口，获取一个临时的 code。

小程序将获取到的 code 发送给Django后端服务器。

后端服务器使用这个 code 向微信服务器请求，换取用户的唯一标识 openid 和会话密钥 session_key。

后端根据 openid 查找用户。如果用户存在，则更新用户信息；如果不存在，则创建新用户。随后，生成一个JWT（JSON Web Token）作为登录凭证。

后端将生成的JWT返回给小程序。

小程序将JWT存储在本地，在后续的每次请求中都携带这个JWT，用于身份验证。

3.1.3 关键 API 接口

接口名称	功能描述
POST /api/users/wechat-login/	微信登录/注册,请求体包含 code,成功返回 JWT。
GET /api/users/me/	获取当前用户信息。
POST /api/users/logout/	用户登出（后端可将 Token 加入黑名单,如果使用JWT黑名单机制）。

3.2 菜品管理模块
3.2.1 基本功能
菜品分类管理(MP2):
管理员添加、查看、修改、删除菜品分类。
菜品信息管理(MP2):
管理员添加新菜品（名称、描述、价格、图片、所属分类、库存等）。
管理员查看、修改、删除现有菜品信息。
管理员设置菜品上架/下架状态。
菜品展示(MP1):
用户按分类浏览菜品列表。
用户查看菜品详情（图片、名称、描述、价格）。
用户搜索菜品。

3.2.2 主要业务流程
管理员添加菜品流程：

管理员在管理端小程序（MP2）中进入菜品管理界面。

选择“添加菜品”功能。

填写新菜品的详细信息，包括名称、价格、描述、上传图片以及选择菜品分类。所有必填项完成后，方可提交。

点击“提交”按钮。

Django后端服务器接收到请求后，首先对提交的数据进行校验，如检查数据格式、必填项是否为空、图片大小是否合规等。

数据校验通过后，将新的菜品信息存入MySQL数据库。

向管理端小程序（MP2）返回操作成功的消息。

用户浏览菜品流程：

用户在用户端小程序（MP1）中进入菜单页面并发起请求，可以带有分类参数来筛选菜品。

后端服务处理该请求。首先查询Redis缓存中是否存在相应的菜品数据。

如果缓存中存在数据（缓存命中），则直接从Redis获取。如果缓存中不存在（缓存未命中），则查询MySQL数据库获取菜品数据，并将查询结果存入Redis缓存以备后续使用。

后端将获取到的菜品数据返回给小程序。

小程序接收到数据后，在界面上渲染并展示菜品列表。

3.2.3 关键 API 接口

接口名称	功能描述
用户端 (MP1) 接口	
GET /api/categories/	获取所有菜品分类列表。
GET /api/dishes/	获取菜品列表（支持按分类、关键词搜索、分页）。
GET /api/dishes/{dish_id}/	获取单个菜品详情。
管理端 (MP2) 接口	
POST /api/admin/categories/	创建菜品分类。
PUT /api/admin/categories/{category_id}/	修改菜品分类。
DELETE /api/admin/categories/{category_id}/	删除菜品分类。
POST /api/admin/dishes/	创建菜品。
PUT /api/admin/dishes/{dish_id}/	修改菜品。
DELETE /api/admin/dishes/{dish_id}/	删除菜品。

3.3 用户点餐模块(含购物车)
3.3.1 基本功能
添加菜品到购物车(MP1): 用户在菜品列表或详情页将菜品加入购物车。此操作
主要在小程序前端完成,更新前端维护的购物车数据结构。
查看购物车(MP1): 用户查看已选菜品列表、数量、单项小计、总金额。数据直
接从前端购物车数据结构中读取并展示。
修改购物车(MP1): 用户增/减购物车中菜品数量,移除菜品。操作直接修改前端
购物车数据。
清空购物车(MP1): 用户清空所有已选菜品。操作直接清空前端购物车数据。
提交订单(MP1): 用户确认购物车商品后,小程序将前端购物车內的所有商品信
息打包,调用后端 API 创建订单。

3.3.2 主要业务流程
用户加购与结算流程：

用户在用户端小程序（MP1）的界面上浏览菜品。

点击菜品旁的“+”号或“加入购物车”按钮。

小程序的前端逻辑会更新存储在本地的购物车数据。

当用户进入购物车页面时，页面会根据本地存储的购物车数据进行渲染，展示已选商品。

用户可以在购物车页面重复修改商品数量或移除商品，这些操作会实时更新本地的购物车数据。

用户点击“去结算”按钮。

小程序会将本地购物车中的所有商品数据打包，作为请求体的一部分，调用后端的“创建订单”API接口。

3.3.3 关键 API 交互
购物车主要在前端管理,后端的 API 接口将不直接用于实时的购物车增删改查。
核心交互点在于:
POST /api/orders/: 创建订单。

3.4 订单管理模块
3.4.1 基本功能
用户创建订单(MP1): 用户从购物车结算,系统生成订单,初始状态为“待支付”。
用户查看订单(MP1):
用户查看自己的历史订单列表(区分待支付、已支付、已完成三种状态)。
用户查看订单详情(订单号、下单时间、菜品列表、金额、状态)。
管理员查看订单(MP2):
管理员查看所有顾客订单列表(可按状态筛选)。
管理员查看订单详情。
管理员更新订单状态(MP2):管理员手动更新订单状态(已支付 -> 已完成)。
取消订单(MP1/MP2):
用户在支付前可以取消订单。
管理员可以取消特定订单,若已支付,同时退款。

3.4.2 主要业务流程
流程图:用户下单流程

用户在用户端小程序（MP1）中点击“去结算”。

小程序收集购物车中的商品数据和当前的用户信息。

调用后端的创建订单API。

Django后端服务接收到请求后，进行一系列的验证和处理：

验证库存和商品状态是否有效。

计算商品总价和应用的优惠。

生成一个唯一的订单号。

在数据库中创建一条订单记录，初始状态设置为“待支付”。

为订单中的每一个商品创建订单项目记录（OrderItem）。

预留相应的库存。

如果验证过程中出现任何问题（如库存不足），则向小程序返回错误信息。

后端处理成功后，将生成的订单信息返回给小程序。

小程序接收到订单信息后，跳转到支付页面或订单详情页面。

流程图:管理员处理订单流程

管理员在管理端（MP2）查看状态为“已支付”的订单列表。

当餐品制作完成并上餐后，管理员点击对应订单的“订单完成”按钮。

管理端向Django后端发送一个API请求，以更新订单状态。

后端服务接收到请求，将该订单的状态从“已支付”更新为“已完成”，并同步到MySQL数据库。

订单完成，流程结束。

3.4.3 关键 API 接口

接口名称	功能描述
用户端 (MP1) 接口	
POST /api/orders/	创建订单。请求体:购物车项目,备注等。
GET /api/orders/	获取用户自己的订单列表（支持按状态过滤、分页）。
GET /api/orders/{order_id}/	获取用户订单详情。
POST /api/orders/{order_id}/cancel/	用户取消未支付订单。
管理端 (MP2) 接口	
GET /api/admin/orders/	获取所有订单列表（支持过滤、分页）。
GET /api/admin/orders/{order_id}/	获取订单详情。
PATCH /api/admin/orders/{order_id}/status/	更新订单状态。请求体: {new_status}。

3.5 管理员功能模块
此模块主要通过管理端小程序(MP2)实现,部分功能已在“菜品管理”和“订单管理”
中描述。此处总结管理员特有功能。

3.5.1 基本功能及扩展
菜品管理(MP2): (详见 3.2)添加、修改、删除菜品和分类,管理菜品上下架。
订单管理(MP2): (详见 3.4)查看所有订单,更新订单状态。
餐厅信息管理(MP2):
查看和修改餐厅基本信息（名称、联系方式、营业时间、位置等）。

3.5.3 关键 API 接口

接口名称	功能描述
GET /api/admin/restaurant/profile/	获取餐厅信息。
PUT /api/admin/restaurant/profile/	修改餐厅信息。
GET /api/admin/dashboard/summary/	获取营业额等统计摘要。

3.6 移动支付模块
3.6.1 基本功能
微信支付集成(MP1):
用户提交订单后,选择微信支付。
系统调用微信统一下单接口,获取预支付交易会话标识(prepay_id)。
小程序端调起微信支付。
系统接收微信支付结果通知,更新订单状态为“已支付”。

3.6.2 主要业务流程
微信支付流程：

用户在MP1小程序的订单确认页面点击支付。

MP1小程序向Django后端请求支付API，并传递订单ID。

Django后端接收到支付请求，并验证订单信息的有效性。

后端生成预支付订单，并进行签名加密。

后端向微信支付服务器发起请求，以生成预支付ID。

微信支付服务器处理请求后，将预支付ID返回给Django后端。

Django后端将包含预支付ID等支付参数返回给MP1小程序。

MP1小程序调用微信支付SDK，并展示支付界面。

用户在微信支付界面完成支付操作（如确认支付或输入密码）。

支付成功后，微信支付服务器会异步地将支付结果和签名通知给Django后端设置的回调地址。

Django后端接收到通知后，会验证签名的有效性，然后更新订单状态为“已支付”，并记录相关的支付信息。

（可选）支付成功后，用户在小程序端会收到支付成功的通知。

3.6.3 关键 API 接口

接口名称	功能描述
POST /api/orders/{order_id}/initiate-payment/	用户发起支付。请求体:{payment_method: 'wechat_pay'}。返回调起微信支付所需参数。
POST /api/payment/wechat/notify/	微信支付结果异步通知回调接口。

3.7 营销促销模块
3.7.1 基本功能
优惠券管理(MP2 ):
管理员创建简单的优惠券(如满减券、折扣券)。
优惠券使用(MP1):
用户在下单结算时,可以选择优惠券应用优惠。
系统校验优惠码有效性并计算优惠金额。

3.7.3 主要业务流程
用户使用优惠券流程：

用户在MP1小程序的结算页面。

用户输入一个优惠码。

MP1小程序将这个优惠码连同订单信息一起发送给Django后端。

Django后端对优惠券进行校验，检查其是否存在、是否在有效期内、以及订单是否满足使用条件（如最低消费金额）。如果优惠券无效，则向前端返回错误信息。

如果优惠券有效，后端会计算优惠后的订单金额，并更新订单总价。

在后端校验期间，前端页面会向用户显示“正在验证...”的提示。

校验成功后，前端会显示优惠成功的提示，并刷新页面上的价格信息。

用户可以继续进行下单或支付流程。

3.7.4 关键 API 接口

接口名称	功能描述
POST /api/orders/apply-coupon/	用户在创建订单时尝试应用优惠券。请求体:{coupon_code, current_cart_items}, 返回优惠后的金额或错误信息。此逻辑可整合到创建订单 API 中。
MP2 Admin API for CRUD operations on Coupons	管理端小程序用于优惠券的创建、读取、更新、删除操作。